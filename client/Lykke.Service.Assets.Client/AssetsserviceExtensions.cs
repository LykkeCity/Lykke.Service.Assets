// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Lykke.Service.Assets.Client
{
    using Lykke.Service;
    using Lykke.Service.Assets;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Assetsservice.
    /// </summary>
    public static partial class AssetsserviceExtensions
    {
            /// <summary>
            /// Forcibly updates asset pairs cache
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void UpdateAssetPairsCache(this IAssetsservice operations)
            {
                operations.UpdateAssetPairsCacheAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Forcibly updates asset pairs cache
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAssetPairsCacheAsync(this IAssetsservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateAssetPairsCacheWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns asset pair by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// Asset pair ID
            /// </param>
            public static object GetAssetPair(this IAssetsservice operations, string assetPairId)
            {
                return operations.GetAssetPairAsync(assetPairId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns asset pair by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// Asset pair ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAssetPairAsync(this IAssetsservice operations, string assetPairId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssetPairWithHttpMessagesAsync(assetPairId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all asset pairs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<AssetPairResponseModel> GetAssetPairs(this IAssetsservice operations)
            {
                return operations.GetAssetPairsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all asset pairs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AssetPairResponseModel>> GetAssetPairsAsync(this IAssetsservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssetPairsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Forcibly updates assets cache
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void UpdateAssetsCache(this IAssetsservice operations)
            {
                operations.UpdateAssetsCacheAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Forcibly updates assets cache
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAssetsCacheAsync(this IAssetsservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateAssetsCacheWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns asset by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// Asset ID
            /// </param>
            public static object GetAsset(this IAssetsservice operations, string assetId)
            {
                return operations.GetAssetAsync(assetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns asset by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// Asset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAssetAsync(this IAssetsservice operations, string assetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssetWithHttpMessagesAsync(assetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all assets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<AssetResponseModel> GetAssets(this IAssetsservice operations)
            {
                return operations.GetAssetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all assets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AssetResponseModel>> GetAssetsAsync(this IAssetsservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IsAliveResponse IsAlive(this IAssetsservice operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IsAliveResponse> IsAliveAsync(this IAssetsservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
